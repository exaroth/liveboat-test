{
  "id": "AXJnNj1p7gNGHeShbM5NH2qrEU51AXyHm",
  "title": "Julia Evans",
  "displayTitle": "Dev - Julia Evans",
  "url": "https://jvns.ca/atom.xml",
  "feedLink": "https://jvns.ca/atom.xml",
  "is_query": false,
  "items": [
    {
      "title": "\"Rules\" that terminal programs follow",
      "url": "https://jvns.ca/blog/2024/11/26/terminal-rules/",
      "date": 1733995702,
      "author": "Julia Evans",
      "unread": true,
      "content": "<p>Recently I&rsquo;ve been thinking about how everything that happens in the terminal\nis some combination of:</p>\n<ol>\n<li>Your <strong>operating system</strong>&rsquo;s job</li>\n<li>Your <strong>shell</strong>&rsquo;s job</li>\n<li>Your <strong>terminal emulator</strong>&rsquo;s job</li>\n<li>The job of <strong>whatever program you happen to be running</strong> (like <code>top</code> or <code>vim</code> or <code>cat</code>)</li>\n</ol>\n<p>The first three (your operating system, shell, and terminal emulator) are all kind of\nknown quantities &ndash; if you&rsquo;re using bash in GNOME Terminal on Linux, you can\nmore or less reason about how how all of those things interact, and some of\ntheir behaviour is standardized by POSIX.</p>\n<p>But the fourth one (&ldquo;whatever program you happen to be running&rdquo;) feels like it\ncould do ANYTHING. How are you supposed to know how a program is going to\nbehave?</p>\n<p>This post is kind of long so here&rsquo;s a quick table of contents:</p>\n<ul>\n<li><a href=\"#programs-behave-surprisingly-consistently\">programs behave surprisingly consistently</a></li>\n<li><a href=\"#these-are-meant-to-be-descriptive-not-prescriptive\">these are meant to be descriptive, not prescriptive</a></li>\n<li><a href=\"#it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement\">it&rsquo;s not always obvious which &ldquo;rules&rdquo; are the program&rsquo;s responsibility to implement</a></li>\n<li><a href=\"#rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c\">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></a></li>\n<li><a href=\"#rule-2-tuis-should-quit-when-you-press-q\">rule 2: TUIs should quit when you press <code>q</code></a></li>\n<li><a href=\"#rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line\">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</a></li>\n<li><a href=\"#rule-4-don-t-use-more-than-16-colours\">rule 4: don&rsquo;t use more than 16 colours</a></li>\n<li><a href=\"#rule-5-vaguely-support-readline-keybindings\">rule 5: vaguely support readline keybindings</a></li>\n<li><a href=\"#rule-5-1-ctrl-w-should-delete-the-last-word\">rule 5.1: <code>Ctrl-W</code> should delete the last word</a></li>\n<li><a href=\"#rule-6-disable-colours-when-writing-to-a-pipe\">rule 6: disable colours when writing to a pipe</a></li>\n<li><a href=\"#rule-7-means-stdin-stdout\">rule 7: <code>-</code> means stdin/stdout</a></li>\n<li><a href=\"#these-rules-take-a-long-time-to-learn\">these &ldquo;rules&rdquo; take a long time to learn</a></li>\n</ul>\n<h3 id=\"programs-behave-surprisingly-consistently\">programs behave surprisingly consistently</h3>\n<p>As far as I know, there are no real standards for how programs in the terminal\nshould behave &ndash; the closest things I know of are:</p>\n<ul>\n<li>POSIX, which mostly dictates how your terminal emulator / OS / shell should\nwork together. I think it does specify a few things about how core utilities like\n<code>cp</code> should work but AFAIK it doesn&rsquo;t have anything to say about how for\nexample <code>htop</code> should behave.</li>\n<li>these <a href=\"https://clig.dev/\">command line interface guidelines</a></li>\n</ul>\n<p>But even though there are no standards, in my experience programs in the\nterminal behave in a pretty consistent way. So I wanted to write down a list of\n&ldquo;rules&rdquo; that in my experience programs mostly follow.</p>\n<h3 id=\"these-are-meant-to-be-descriptive-not-prescriptive\">these are meant to be descriptive, not prescriptive</h3>\n<p>My goal here isn&rsquo;t to convince authors of terminal programs that they <em>should</em>\nfollow any of these rules. There are lots of exceptions to these and often\nthere&rsquo;s a good reason for those exceptions.</p>\n<p>But it&rsquo;s very useful for me to know what behaviour to expect from a random new\nterminal program that I&rsquo;m using. Instead of &ldquo;uh, programs could do literally\nanything&rdquo;, it&rsquo;s &ldquo;ok, here are the basic rules I expect, and then I can keep a\nshort mental list of exceptions&rdquo;.</p>\n<p>So I&rsquo;m just writing down what I&rsquo;ve observed about how programs behave in my 20\nyears of using the terminal, why I think they behave that way, and some\nexamples of cases where that rule is &ldquo;broken&rdquo;.</p>\n<h3 id=\"it-s-not-always-obvious-which-rules-are-the-program-s-responsibility-to-implement\">it&rsquo;s not always obvious which &ldquo;rules&rdquo; are the program&rsquo;s responsibility to implement</h3>\n<p>There are a bunch of common conventions that I think are pretty clearly the\nprogram&rsquo;s responsibility to implement, like:</p>\n<ul>\n<li>config files should go in <code>~/.BLAHrc</code> or <code>~/.config/BLAH/FILE</code> or <code>/etc/BLAH/</code> or something</li>\n<li><code>--help</code> should print help text</li>\n<li>programs should print &ldquo;regular&rdquo; output to stdout and errors to stderr</li>\n</ul>\n<p>But in this post I&rsquo;m going to focus on things that it&rsquo;s not 100% obvious are\nthe program&rsquo;s responsibility. For example it feels to me like a &ldquo;law of nature&rdquo;\nthat pressing <code>Ctrl-D</code> should quit a REPL, but programs often\nneed to explicitly implement support for it &ndash; even though <code>cat</code> doesn&rsquo;t need\nto implement <code>Ctrl-D</code> support, <code>ipython</code> <a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837\">does</a>. (more about that in &ldquo;rule 3&rdquo; below)</p>\n<p>Understanding which things are the program&rsquo;s responsibility makes it much less\nsurprising when different programs&rsquo; implementations are slightly different.</p>\n<h3 id=\"rule-1-noninteractive-programs-should-quit-when-you-press-ctrl-c\">rule 1: noninteractive programs should quit when you press <code>Ctrl-C</code></h3>\n<p>The main reason for this rule is that noninteractive programs will quit by\ndefault on <code>Ctrl-C</code> if they don&rsquo;t set up a <code>SIGINT</code> signal handler, so this is\nkind of a &ldquo;you should act like the default&rdquo; rule.</p>\n<p>Something that trips a lot of people up is that this doesn&rsquo;t apply to\n<strong>interactive</strong> programs like <code>python3</code> or <code>bc</code> or <code>less</code>. This is because in\nan interactive program, <code>Ctrl-C</code> has a different job &ndash; if the program is\nrunning an operation (like for example a search in <code>less</code> or some Python code\nin <code>python3</code>), then <code>Ctrl-C</code> will interrupt that operation but not stop the\nprogram.</p>\n<p>As an example of how this works in an interactive program: here&rsquo;s the code <a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/vi.py#L2225\">in prompt-toolkit</a> (the library that iPython uses for handling input)\nthat aborts a search when you press <code>Ctrl-C</code>.</p>\n<h3 id=\"rule-2-tuis-should-quit-when-you-press-q\">rule 2: TUIs should quit when you press <code>q</code></h3>\n<p>TUI programs (like <code>less</code> or <code>htop</code>) will usually quit when you press <code>q</code>.</p>\n<p>This rule doesn&rsquo;t apply to any program where pressing <code>q</code> to quit wouldn&rsquo;t make\nsense, like <code>tmux</code> or text editors.</p>\n<h3 id=\"rule-3-repls-should-quit-when-you-press-ctrl-d-on-an-empty-line\">rule 3: REPLs should quit when you press <code>Ctrl-D</code> on an empty line</h3>\n<p>REPLs (like <code>python3</code> or <code>ed</code>) will usually quit when you press <code>Ctrl-D</code> on an\nempty line. This rule is similar to the <code>Ctrl-C</code> rule &ndash; the reason for this is\nthat by default if you&rsquo;re running a program (like <code>cat</code>) in &ldquo;cooked mode&rdquo;, then\nthe operating system will return an <code>EOF</code> when you press <code>Ctrl-D</code> on an empty\nline.</p>\n<p>Most of the REPLs I use (sqlite3, python3, fish, bash, etc) don&rsquo;t actually use\ncooked mode, but they all implement this keyboard shortcut anyway to mimic the\ndefault behaviour.</p>\n<p>For example, here&rsquo;s <a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/shortcuts/prompt.py#L824-L837\">the code in prompt-toolkit</a>\nthat quits when you press Ctrl-D, and here&rsquo;s <a href=\"https://github.com/bminor/bash/blob/6794b5478f660256a1023712b5fc169196ed0a22/lib/readline/readline.c#L658-L672\">the same code in readline</a>.</p>\n<p>I actually thought that this one was a &ldquo;Law of Terminal Physics&rdquo; until very\nrecently because I&rsquo;ve basically never seen it broken, but you can see that it&rsquo;s\njust something that each individual input library has to implement in the links\nabove.</p>\n<p>Someone pointed out that the Erlang REPL does not quit when you press <code>Ctrl-D</code>,\nso I guess not every REPL follows this &ldquo;rule&rdquo;.</p>\n<h3 id=\"rule-4-don-t-use-more-than-16-colours\">rule 4: don&rsquo;t use more than 16 colours</h3>\n<p>Terminal programs rarely use colours other than the base 16 ANSI colours. This\nis because if you specify colours with a hex code, it&rsquo;s very likely to clash\nwith some users&rsquo; background colour. For example if I print out some text as\n<code>#EEEEEE</code>, it would be almost invisible on a white background, though it would\nlook fine on a dark background.</p>\n<p>But if you stick to the default 16 base colours, you have a much better chance\nthat the user has configured those colours in their terminal emulator so that\nthey work reasonably well with their background color. Another reason to stick\nto the default base 16 colours is that it makes less assumptions about what\ncolours the terminal emulator supports.</p>\n<p>The only programs I usually see breaking this &ldquo;rule&rdquo; are text editors, for\nexample Helix by default will use a purple background which is not a default\nANSI colour. It seems fine for Helix to break this rule since Helix isn&rsquo;t a\n&ldquo;core&rdquo; program and I assume any Helix user who doesn&rsquo;t like that colorscheme\nwill just change the theme.</p>\n<h3 id=\"rule-5-vaguely-support-readline-keybindings\">rule 5: vaguely support readline keybindings</h3>\n<p>Almost every program I use supports <code>readline</code> keybindings if it would make\nsense to do so. For example, here are a bunch of different programs and a link\nto where they define <code>Ctrl-E</code> to go to the end of the line:</p>\n<ul>\n<li>ipython (<a href=\"https://github.com/prompt-toolkit/python-prompt-toolkit/blob/a2a12300c635ab3c051566e363ed27d853af4b21/src/prompt_toolkit/key_binding/bindings/emacs.py#L72\">Ctrl-E defined here</a>)</li>\n<li>atuin (<a href=\"https://github.com/atuinsh/atuin/blob/a67cfc82fe0dc907a01f07a0fd625701e062a33b/crates/atuin/src/command/client/search/interactive.rs#L407\">Ctrl-E defined here</a>)</li>\n<li>fzf (<a href=\"https://github.com/junegunn/fzf/blob/bb55045596d6d08445f3c6d320c3ec2b457462d1/src/terminal.go#L611\">Ctrl-E defined here</a>)</li>\n<li>zsh (<a href=\"https://github.com/zsh-users/zsh/blob/86d5f24a3d28541f242eb3807379301ea976de87/Src/Zle/zle_bindings.c#L94\">Ctrl-E defined here</a>)</li>\n<li>fish (<a href=\"https://github.com/fish-shell/fish-shell/blob/99fa8aaaa7956178973150a03ce4954ab17a197b/share/functions/fish_default_key_bindings.fish#L43\">Ctrl-E defined here</a>)</li>\n<li>tmux&rsquo;s command prompt (<a href=\"https://github.com/tmux/tmux/blob/ae8f2208c98e3c2d6e3fe4cad2281dce8fd11f31/key-bindings.c#L490\">Ctrl-E defined here</a>)</li>\n</ul>\n<p>None of those programs actually uses <code>readline</code> directly, they just sort of\nmimic emacs/readline keybindings. They don&rsquo;t always mimic them <em>exactly</em>: for\nexample atuin seems to use <code>Ctrl-A</code> as a prefix, so <code>Ctrl-A</code> doesn&rsquo;t go to the\nbeginning of the line.</p>\n<p>Also all of these programs seem to implement their own internal cut and paste\nbuffers so you can delete a line with <code>Ctrl-U</code> and then paste it with <code>Ctrl-Y</code>.</p>\n<p>The exceptions to this are:</p>\n<ul>\n<li>some programs (like <code>git</code>, <code>cat</code>, and <code>nc</code>) don&rsquo;t have any line editing support at all (except for backspace, <code>Ctrl-W</code>, and <code>Ctrl-U</code>)</li>\n<li>as usual text editors are an exception, every text editor has its own\napproach to editing text</li>\n</ul>\n<p>I wrote more about this &ldquo;what keybindings does a program support?&rdquo; question in\n<a href=\"https://jvns.ca/blog/2024/07/08/readline/\">entering text in the terminal is complicated</a>.</p>\n<h3 id=\"rule-5-1-ctrl-w-should-delete-the-last-word\">rule 5.1: Ctrl-W should delete the last word</h3>\n<p>I&rsquo;ve never seen a program (other than a text editor) where <code>Ctrl-W</code> <em>doesn&rsquo;t</em>\ndelete the last word. This is similar to the <code>Ctrl-C</code> rule &ndash; by default if a\nprogram is in &ldquo;cooked mode&rdquo;, the OS will delete the last word if you press\n<code>Ctrl-W</code>, and delete the whole line if you press <code>Ctrl-U</code>. So usually programs\nwill imitate that behaviour.</p>\n<p>I can&rsquo;t think of any exceptions to this other than text editors but if there\nare I&rsquo;d love to hear about them!</p>\n<h3 id=\"rule-6-disable-colours-when-writing-to-a-pipe\">rule 6: disable colours when writing to a pipe</h3>\n<p>Most programs will disable colours when writing to a pipe. For example:</p>\n<ul>\n<li><code>rg blah</code> will highlight all occurrences of <code>blah</code> in the output, but if the\noutput is to a pipe or a file, it&rsquo;ll turn off the highlighting.</li>\n<li><code>ls --color=auto</code> will use colour when writing to a terminal, but not when\nwriting to a pipe</li>\n</ul>\n<p>Both of those programs will also format their output differently when writing\nto the terminal: <code>ls</code> will organize files into columns, and ripgrep will group\nmatches with headings.</p>\n<p>If you want to force the program to use colour (for example because you want to\nlook at the colour), you can use <code>unbuffer</code> to force the program&rsquo;s output to be\na tty like this:</p>\n<pre><code>unbuffer rg blah |  less -R\n</code></pre>\n<p>I&rsquo;m sure that there are some programs that &ldquo;break&rdquo; this rule but I can&rsquo;t think\nof any examples right now. Some programs have an <code>--color</code> flag that you can\nuse to force colour to be on, in the example above you could also do <code>rg --color=always | less -R</code>.</p>\n<h3 id=\"rule-7-means-stdin-stdout\">rule 7: <code>-</code> means stdin/stdout</h3>\n<p>Usually if you pass <code>-</code> to a program instead of a filename, it&rsquo;ll read from\nstdin or write to stdout (whichever is appropriate). For example, if you want\nto format the Python code that&rsquo;s on your clipboard with <code>black</code> and then copy\nit, you could run:</p>\n<pre><code>pbpaste | black - | pbcopy\n</code></pre>\n<p>(<code>pbpaste</code> is a Mac program, you can do something similar on Linux with <code>xclip</code>)</p>\n<p>My impression is that most programs implement this if it would make sense and I\ncan&rsquo;t think of any exceptions right now, but I&rsquo;m sure there are many\nexceptions.</p>\n<h3 id=\"these-rules-take-a-long-time-to-learn\">these &ldquo;rules&rdquo; take a long time to learn</h3>\n<p>These rules took me a long time for me to learn because I had to:</p>\n<ol>\n<li>learn that the rule applied anywhere at all (&quot;<code>Ctrl-C</code> will exit programs&quot;)</li>\n<li>notice some exceptions (&ldquo;okay, <code>Ctrl-C</code> will exit <code>find</code> but not <code>less</code>&rdquo;)</li>\n<li>subconsciously figure out what the pattern is (&quot;<code>Ctrl-C</code> will generally quit\nnoninteractive programs, but in interactive programs it might interrupt the\ncurrent operation instead of quitting the program&quot;)</li>\n<li>eventually maybe formulate it into an explicit rule that I know</li>\n</ol>\n<p>A lot of my understanding of the terminal is honestly still in the\n&ldquo;subconscious pattern recognition&rdquo; stage. The only reason I&rsquo;ve been taking the\ntime to make things explicit at all is because I&rsquo;ve been trying to explain how\nit works to others. Hopefully writing down these &ldquo;rules&rdquo; explicitly will make\nlearning some of this stuff a little bit faster for others.</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    }
  ]
}