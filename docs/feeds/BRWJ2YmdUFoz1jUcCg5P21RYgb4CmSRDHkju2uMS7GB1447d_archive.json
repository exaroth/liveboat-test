{
  "id": "BRWJ2YmdUFoz1jUcCg5P21RYgb4CmSRDHkju2uMS7GB1447d",
  "title": "Mouse Vs Python",
  "displayTitle": "Dev - Python Blog",
  "url": "https://blog.pythonlibrary.org/feed",
  "feedLink": "https://www.blog.pythonlibrary.org/",
  "is_query": false,
  "items": [
    {
      "title": "An Intro to pre-commit",
      "url": "https://www.blog.pythonlibrary.org/2024/12/23/an-intro-to-pre-commit/",
      "date": 1734959382,
      "author": "Mike",
      "unread": true,
      "content": "<p>You can use many great tools to help you in your software development journey. One such tool is <a href=\"http://A framework for managing and maintaining multi-language pre-commit hooks\">pre-commit</a>, a framework for managing and maintaining multi-language <span class=\"text-nowrap\">pre-commit</span> hooks. You use pre-commit to run one or more tools before allowing you to commit your code locally. For example, you might run the Flake8 linter or the <a href=\"https://www.blog.pythonlibrary.org/2023/10/25/the-ruff-formatter-pythons-fastest-formatter/\">Ruff formatter</a> on your Python code in GitHub Actions or some other CI. But rather than waiting for CI to run, you want to run those checks locally and automatically.</p>\n<p>That is where pre-commit comes in. You tell pre-c0mmit what to run, and it will run right before it allows you to commit your code.If any of those checks fail, you must fix your code before committing it.</p>\n<h2>Installing pre-commit</h2>\n<p>pre-commit is a Python package, so you can install it using pip. Here&#8217;s the command you&#8217;ll need to run in your terminal:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pip install pre-commit</pre>\n<p>Once pre-commit is installed, you can confirm that it works by running the following:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit --version</pre>\n<h2>Adding the git Hooks</h2>\n<p>The next step is to navigate to one of your local GitHub code bases in your terminal. Once inside one of your repos, you will need to run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit install</pre>\n<p>This command installs pre-commit in your <code>.git\\hooks</code> folder so that pre-commit runs whenever you commit. But how does pre-commit know what to run?</p>\n<p>You have to define what <code>pre-commit</code> runs using a special YAML file. You&#8217;ll learn how in the next section!</p>\n<h2>Adding a pre-commit Configuration</h2>\n<p>You need to add a file named <strong>.pre-commit-config.yaml</strong> (note the leading period) into the root of your repo. If you want to generate a simple config file, you can run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit sample-config</pre>\n<p>Here&#8217;s an example config for running Black on your code:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n    -   id: check-yaml\n    -   id: end-of-file-fixer\n    -   id: trailing-whitespace\n-   repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n    -   id: black</pre>\n<p>Personally, I like to run the Ruff formatter and linter as well as a couple of defaults, so I use this config a lot:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"yaml\">repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-added-large-files\n\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  # Ruff version.\n  rev: v0.1.7\n  hooks:\n    # Run the linter.\n    - id: ruff\n    # Run the formatter.\n    - id: ruff-format\n</pre>\n<p>When you add a new rule to pre-commit, you should run that rule against all the files in your repo so you don&#8217;t have any surprises later on. To do that, you need to run this command:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">pre-commit run --all-files</pre>\n<p>Once you have run all your new rules against all your code files, you can start working on your next feature or bug fix. Then, when you run,  <code>git commit</code> the pre-commit hooks will run, and you&#8217;ll see if your code is good enough to pass.</p>\n<h2>Wrapping Up</h2>\n<p>There are TONs of hooks you can add to pre-commit. A lot of them are mentioned on the <a href=\"https://pre-commit.com/\">pre-commit website</a>. You can add Mypy, pytest, and much, much more to your pre-commit hooks. Just don&#8217;t get too crazy, or they may take too long to run, and you&#8217;ll go nuts waiting for it.</p>\n<p>Overall, running so many of your CI hooks locally is great because your machine is usually faster than waiting on a queue in CI. Give it a try and see what think!</p>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/23/an-intro-to-pre-commit/\">An Intro to pre-commit</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n",
      "flags": null,
      "enclosureUrl": "",
      "enclosureMime": ""
    },
    {
      "title": "The Python Countdown to Christmas 2024 Giveaway",
      "url": "https://www.blog.pythonlibrary.org/2024/12/16/the-python-countdown-to-christmas-2024-giveaway/",
      "date": 1734381710,
      "author": "Mike",
      "unread": true,
      "content": "<p>Happy Holidays and Merry Christmas from me to you! I have been giving away hundreds of Python books and courses for Christmas for the last couple of years!</p>\n<div style=\"width: 1200px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-12512-1\" width=\"1200\" height=\"675\" loop=\"1\" autoplay=\"1\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4?_=1\" /><a href=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4\">https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4</a></video></div>\n<p>From now until Christmas, I will be giving away hundreds more. You can start learning Python for free using my books or courses.</p>\n<p>All you have to do is follow me on one of these platforms and watch out for my post that describes how to get a free book or course:</p>\n<ul>\n<li><a href=\"https://x.com/driscollis/\">X / Twitter</a></li>\n<li><a href=\"https://www.linkedin.com/in/driscollis/\">LinkedIn</a></li>\n<li><a href=\"https://mastodon.social/@driscollis\">Mastodon</a></li>\n<li><a href=\"https://www.threads.net/@driscollis\">Threads</a></li>\n<li><a href=\"https://bsky.app/profile/teachmepython\">BlueSky</a></li>\n</ul>\n<p>The post <a href=\"https://www.blog.pythonlibrary.org/2024/12/16/the-python-countdown-to-christmas-2024-giveaway/\">The Python Countdown to Christmas 2024 Giveaway</a> appeared first on <a href=\"https://www.blog.pythonlibrary.org\">Mouse Vs Python</a>.</p>\n",
      "flags": null,
      "enclosureUrl": "https://www.blog.pythonlibrary.org/wp-content/uploads/2024/12/Countdown-to-christmas-1.mp4",
      "enclosureMime": ""
    }
  ]
}