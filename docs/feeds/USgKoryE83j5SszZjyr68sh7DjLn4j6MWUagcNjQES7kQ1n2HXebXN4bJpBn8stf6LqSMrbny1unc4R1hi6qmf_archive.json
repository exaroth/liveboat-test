{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","items":[{"title":"Naked returns \"considered harmful\"?","url":"https://www.reddit.com/r/golang/comments/1hnbcd4/naked_returns_considered_harmful/","date":1735291824,"author":"/u/AlexandraLinnea","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>In <a href=\"https://bitfieldconsulting.com/posts/defer\">Demystifying defer</a> it says:</p> <blockquote> <p>The Go specification actually allows us to omit the names from the return statement in this case, and this would implicitly return whatever the values of latitude and longitude happen to be at this point. But even though that’s legal syntax, it’s not good practice.</p> <p>It’s always clearer to specify the exact values or variables you’re returning, and there’s no benefit to omitting them. So you should avoid writing these so-called naked returns, even though you’ll sometimes see them in other people’s code.</p> <p>In particular, you should be aware that just because a function has named result parameters, that doesn’t mean you must write a naked return. You can, and should, make your return values explicit.</p> </blockquote> <p>Is it actually harmful to write naked returns? If so, why does anyone do it?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/AlexandraLinnea\"> /u/AlexandraLinnea </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hnbcd4/naked_returns_considered_harmful/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hnbcd4/naked_returns_considered_harmful/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Why Go For System Programming","url":"https://www.reddit.com/r/golang/comments/1hn97pr/why_go_for_system_programming/","date":1735282410,"author":"/u/Best-Gas-2203","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>A beginner&#39;s question here as I dive deeper into the language. But upon reading the specification of the language, it mentions being a good tools for system programming. How should I understanding this statement, as in, the language is wellsuited for writing applications within the service/business logic layer, and not interacting with the UI layer? Or is it something else like operating system? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Best-Gas-2203\"> /u/Best-Gas-2203 </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hn97pr/why_go_for_system_programming/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hn97pr/why_go_for_system_programming/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"What’s your favorite program that you’ve ever written in go?","url":"https://www.reddit.com/r/golang/comments/1hn0zl1/whats_your_favorite_program_that_youve_ever/","date":1735255359,"author":"/u/_K8s","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Do you have any cool programs that you have written or enjoyed writing over the years?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/_K8s\"> /u/_K8s </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hn0zl1/whats_your_favorite_program_that_youve_ever/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hn0zl1/whats_your_favorite_program_that_youve_ever/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How to Make Go Structs More Efficient","url":"https://www.reddit.com/r/golang/comments/1hmwmeq/how_to_make_go_structs_more_efficient/","date":1735243322,"author":"/u/GolangProject","unread":true,"desc":"","content":"<table> <tr><td> <a href=\"https://www.reddit.com/r/golang/comments/1hmwmeq/how_to_make_go_structs_more_efficient/\"> <img src=\"https://external-preview.redd.it/iNQ-UqFqCarQzIUyZbEs4N8eRP3qJR_0el4tyeZTk_Y.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6b1e8640f3dbb03796dcfaa61e9f27c909301ea5\" alt=\"How to Make Go Structs More Efficient\" title=\"How to Make Go Structs More Efficient\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/GolangProject\"> /u/GolangProject </a> <br/> <span><a href=\"https://golangprojectstructure.com/how-to-make-go-structs-more-efficient/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hmwmeq/how_to_make_go_structs_more_efficient/\">[comments]</a></span> </td></tr></table>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"How would you handle authentication and sessions within CLIs?","url":"https://www.reddit.com/r/golang/comments/1hmtmx6/how_would_you_handle_authentication_and_sessions/","date":1735235271,"author":"/u/soupgasm","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hey guys, so I&#39;m currently building a CLI and for the API to work the user has to generate a personal access token. I&#39;m currently just getting the token before each API call and passing it to the HTTP client. This needs to be done. But I want a simple way to check that the user is logged in. Would I then wrap the whole CLI in the authentication wrapper and check the session? How would you do this? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/soupgasm\"> /u/soupgasm </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hmtmx6/how_would_you_handle_authentication_and_sessions/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hmtmx6/how_would_you_handle_authentication_and_sessions/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""},{"title":"Single method interface pattern discussion","url":"https://www.reddit.com/r/golang/comments/1hmtiuf/single_method_interface_pattern_discussion/","date":1735234961,"author":"/u/TryRestartingItAgain","unread":true,"desc":"","content":"<!-- SC_OFF --><div class=\"md\"><p>Hey. As has been discussed many times the Golang standard library has many single method interfaces, e.g.</p> <pre><code>package io type Reader interface { Read(p []byte) (int, error) } </code></pre> <p>These interfaces are easy to implement and create mocks/fakes for.</p> <p>_But_ in web development we often have services, handlers, and store constructs that usually have multiple methods such as <code>SaveUser</code>, <code>GetUser</code>. A very simple User service spec:</p> <pre><code>type userStore interface { GetByID(context.Context, string) (User, error) Save(context.Context, user User) error } type UserService struct { store userStore } func (s UserService) GetUser(ctx context.Context, ID string) (User, error) { ... user, err := s.store.GetByID(ctx, ID) ... } </code></pre> <p>The problem I see with this is that we have a single interface for all of <code>userStore</code> functionality, so I generally create an interface on the producing side that the consumer can use and stub which goes against &quot;define interfaces on consumer side&quot;. The biggest issue I have with this approach is that any fakes must implement the full interface.</p> <p>I was playing around with something like this instead:</p> <pre><code>type userGetter interface { GetByID(context.Context, string) (User, error) } func (s UserService) GetUser(ctx context.Context, ID string) (User, error) { ... user, err := s.userGetter.GetByID(ctx, ID) ... } </code></pre> <p>The original <code>userStore</code> can still be used to implement the interface. It makes the coupling between store and service very relaxed, it&#39;s easy to move functionality and refactor.<br/> And it&#39;s very easy to fake in tests:</p> <pre><code>type UserGetterFn func(context.Context, string) (User, error) func (f UserGetterFn) GetByID(ctx context.Context, ID string) (User, error) { return f(ctx, ID) } svc := UserService{UserGetter: func(ctx context.Context, string) (User, error) { return User{}, fmt.Errorf(&quot;not found&quot;) }) </code></pre> <p>The downside is that it&#39;s a bit tedious to write these, but it&#39;s mostly in the test code so I think it&#39;s fine for it to be more verbose.</p> <p>I can&#39;t quite tell if I like it or not, currently just playing around with it so get a feeling.</p> <p>I&#39;ve never seen anyone use this, so I wonder if anyone has tried this more extreme style?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/TryRestartingItAgain\"> /u/TryRestartingItAgain </a> <br/> <span><a href=\"https://www.reddit.com/r/golang/comments/1hmtiuf/single_method_interface_pattern_discussion/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/golang/comments/1hmtiuf/single_method_interface_pattern_discussion/\">[comments]</a></span>","flags":null,"enclosureUrl":"","enclosureMime":""}]}